<?php
/**
 * @file
 * Automates the creation of menu items for nodes.
 */

/**
 * Implements hook_node_type_load().
 */
function auto_menu_settings_node_type_load(&$types) {
  foreach ($types as $type_name => $type) {
    $types[$type_name]->settings += array(
      'auto_menu_settings_default' => FALSE,
      'auto_menu_settings_title' => '[node:title]',
      'auto_menu_settings_fields' => backdrop_map_assoc(array('provide', 'title', 'description', 'parent', 'weight')),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function auto_menu_settings_form_node_type_form_alter(&$form, $form_state) {
  $settings = $form['#node_type']->settings;
  $token_link = theme('token_tree_link', array(
    'token_types' => array('node'),
    'text' => t('tokens'),
  ));

  $form['menu']['auto_menu_settings_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provide a default menu link'),
    '#description' => t("Set the default value of the 'Provide a menu link' checkbox on the node form."),
    '#default_value' => $settings['auto_menu_settings_default'],
    '#weight' => -5,
  );
  $form['menu']['auto_menu_settings_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Default menu link title'),
    '#description' => t("Set the default value of the 'Menu link title' field on the node form. This field supports ") . $token_link . '.',
    '#default_value' => $settings['auto_menu_settings_title'],
    '#weight' => -4,
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['menu']['auto_menu_settings_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Visible fields'),
    '#description' => t('Show these fields to the node author. Untick fields to hide them.'),
    '#options' => array(
      'provide' => t("'Provide a menu link' checkbox"),
      'title' => t("'Menu link title' textfield"),
      'description' => t("'Description' textfield"),
      'parent' => t("'Parent item' select list"),
      'weight' => t("'Weight' select list"),
    ),
    '#default_value' => $settings['auto_menu_settings_fields'],
    '#weight' => 5,
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function auto_menu_settings_form_node_form_alter(&$form, $form_state) {
  $node_type = node_type_get_type($form['#node']->type);

  // Enable tokens on the 'Menu link title' field.
  $token_link = theme('token_tree_link', array(
    'token_types' => array('node'),
    'text' => t('tokens'),
  ));
  $form['menu']['link']['link_title']['#description'] = t('This field supports ') . $token_link . '.';

  if (empty($form['#node']->menu['link_title'])) {
    // Set the default 'Provide a menu link' value.
    if ($form['menu']['enabled']['#default_value'] != $node_type->settings['auto_menu_settings_default']) {
      $form['menu']['enabled']['#default_value'] = $node_type->settings['auto_menu_settings_default'];
    }

    // Set the default 'Menu link title' value.
    if ($form['menu']['link']['link_title']['#default_value'] != $node_type->settings['auto_menu_settings_title']) {
      $form['menu']['link']['link_title']['#default_value'] = $node_type->settings['auto_menu_settings_title'];
    }
  }

  // Hide fields.
  foreach ($node_type->settings['auto_menu_settings_fields'] as $id => $value) {
    if (!$value) {
      switch ($id) {
        case 'provide':
          $form['menu']['enabled']['#access'] = FALSE;
        break;
        case 'title':
          $form['menu']['link']['link_title']['#access'] = FALSE;
        break;
        case 'description':
          $form['menu']['link']['description']['#access'] = FALSE;
        break;
        case 'parent':
          $form['menu']['link']['parent']['#access'] = FALSE;
        break;
        case 'weight':
          $form['menu']['link']['weight']['#access'] = FALSE;
        break;
      }
    }
  }

  if (empty(array_filter($node_type->settings['auto_menu_settings_fields']))) {
    if (user_access('administer content types')) {
      // Add message explaining why Menu Settings tab is empty.
      $form['menu']['auto_menu_settings_message'] = array(
        '#markup' => '<p>' . t('Menu settings have been hidden by the content type <a href="/admin/structure/types/manage/' . $node_type->type . '">configuration</a>.') . '</p>',
        '#weight' => -10,
      );
    }
    else {
      // Hide Menu Settings tab if empty.
      if (_menu_fields_hidden($form['menu'])) {
        $form['menu']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Check all menu fields to see if they're hidden or not.
 */
function _menu_fields_hidden($fields) {
  foreach (element_children($fields) as $field) {
    if ($fields[$field]['#type'] == 'container') {
      _menu_fields_hidden($fields[$field]);
    }

    if (isset($fields[$field]['#access']) && $fields[$field]['#access'] == TRUE) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implements hook_node_submit().
 */
function auto_menu_settings_node_submit(Node $node, $form, &$form_state) {
  $menu = $form_state['values']['menu'];

  // Replace tokens in the menu link title.
  if ($menu['enabled']) {
    $node->menu['link_title'] = token_replace($menu['link_title'], array('node' => $node));
  }
}

// TODO: Fix 'Not in menu' description on vertical tab on node form (JS)
